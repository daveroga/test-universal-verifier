import { ethers } from "hardhat";
import { IVerifierABI } from "@iden3/universal-verifier-v2-abi";

async function main() {
  const bytesAuthProof =
    "0x00000000000000000000000000000000000000000000000000000000000001202d4edff39e5122a24292481c88f0c7b1419f73eb4be6eaf896a632817f448f3b0b459e106cede9c1df067751d83c0058ba54a6811d43ff28515500d44bf528130a312d9a84d8ad812523fad931823ce73fe35500c0e14d21c2538fb4101dadb21cf34032f9f8b90cafca8736834896d40db085b5135423ae944c8adc9f45fb4a2a11faa4356eb83e3065fc5595a2b359d5081fe511f2e9b4556d0664ee1602b70029298bfdb757f2673516b1c0137e528f4390bc1b2a1b13b035a99338ebff761b766a9defcf2de6d3bba92bd265b48024545fbf17e75403ec0208d3278d58731108e1209757ec2fde395d9bf94a9fa513eb71d65739156b61cfb3b5bdf02ff50000000000000000000000000000000000000000000000000000000000000003000fac68c9bdf95bdfcd8e9ed886f6574454cdea2ab4da9842df78052334520108ffe4ebcac1f45144f13496beffef268b7220414a358326edd4c87ba274cc850be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a";
  const bytesRequestProof =
    "0x0000000000000000000000000000000000000000000000000000000000000120016415f63a614f02088f1318b44d745b7ea9e74b869a047d9d8ee6a77dda4a710f6d4bebc3cc935ba49d587df221360f63f8f0bb7f96fda49dbfa0459fe2702e10fe233595e5e0a1d908769b5489b63cb74b6483b6c29b4c1cde9aad5c34a02318dd6cab336e8cffc8661db5a21015d63baffb335f8935bc5da9fd6fe1c3d54c1d664bb3d99b4baefc19ce466a5a28eb8c5109c7fa8f7f9ad28488c702eb53ae22823c4a8af57cbc99bedb09178769e0264eb31a59fb8db65b77f1d34cc12dc32a0dc1498c39a544c0aa0311becf1b603aa65f1733cd162aec3d81ad4ad23acf27573d9eab7be4be9da108941af2a0b294ff4c8a3165dbbeb1e551877ccacc7e000000000000000000000000000000000000000000000000000000000000000e000fac68c9bdf95bdfcd8e9ed886f6574454cdea2ab4da9842df78052334520126251b374c0355bdd9069ccf0f0e5c1acbc9aa4c7ed4a8679430f80e97f9546c06ce6ff04ec70c871f4a8520f0ac9953d363565b500f45db510ebb87e40fc1ef000000000000000000000000000000000000000000000000000000000000000028bb61abc0e8afe721ff8cd76d7cd069007f5e26d120788ee5e2d4effe986c710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100010000000000009bf480563cffceff1a70c23b052e2f3a02eaa2e11baa73d0000000000000000000000000f4d4c21038f6ae5eaba3d9c819b4bc680ae4baca0be0cef9b604d4289cb559b9ef0f8977c74c6596a2e7969747d75714be20290a000c4406ce6ff04ec70c871f4a8520f0ac9953d363565b500f45db510ebb520106ce6ff04ec70c871f4a8520f0ac9953d363565b500f45db510ebb87e40fc1ef00000000000000000000000000000000000000000000000000000000687e597a0000000000000000000000000000000000000000000000000000000000000001";
  const [signer] = await ethers.getSigners();
  const verifier = new ethers.Contract(
    "0x125942A612E5A48b72DBbE6Cd50C72980a954023",
    IVerifierABI,
    signer
  );
  console.log("Submitting response to verifier...");
  const tx = await verifier.submitResponse(
    {
      authMethod: "authV2",
      proof: bytesAuthProof,
    },
    [
      {
        requestId:
          1766847064778388153590812369389130032074159662467967470042330379355583440n,
        proof: bytesRequestProof,
        metadata: "0x",
      },
    ],
    "0x",
    {
      gasPrice: 700000000,
      initialBaseFeePerGas: 25000000000,
      gasLimit: 2000000,
    }
  );
  console.log(`Waiting for tx ${tx.hash} to be mined...`);
  await tx.wait();
  console.log(`Tx ${tx.hash} mined successfully!`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
